import { AllowedComponentProps } from 'vue';
import type { App } from 'vue';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { ComputedRef } from 'vue';
import type { CSSProperties } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import { Ref } from 'vue';
import { ShallowRef } from 'vue';
import { VNodeProps } from 'vue';

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_2<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_3<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare type ClearFunctions = NotificationClearMethods;

export declare type ClearMethods = NotificationClearMethods;

export declare type ContainersTabIndexMap = Record<string, TabIndexValue>;

declare function createStore(userConfig: NotivueConfig): {
    config: {
        isTopAlign: ComputedRef<boolean>;
        pauseOnHover: ShallowRef<boolean>;
        pauseOnTouch: ShallowRef<boolean>;
        pauseOnTabChange: ShallowRef<boolean>;
        enqueue: ShallowRef<boolean>;
        position: ShallowRef<Position>;
        notifications: ShallowRef<Partial<Record<NotificationType | "global", NotificationOptions_2>>>;
        animations: ShallowRef<NotivueAnimations>;
        teleportTo: ShallowRef<string | HTMLElement>;
        limit: ShallowRef<number>;
    };
    elements: {
        wrapper: Ref<HTMLElement | null>;
        items: Ref<HTMLElement[]>;
        containers: Ref<HTMLElement[]>;
        getSortedItems(): HTMLElement[];
        transitionData: {
            duration: string;
            easing: string;
        } | null;
        getTransitionData(): {
            duration: string;
            easing: string;
        };
        syncTransitionData(): void;
        resetTransitionData(): void;
        addClearAllClass(): void;
    };
    items: {
        entries: ShallowRef<StoreItem[]>;
        queue: ShallowRef<StoreItem[]>;
        isStreamPaused: Ref<boolean>;
        isStreamFocused: Ref<boolean>;
        resetPause(): void;
        setStreamFocus(): void;
        resetStreamFocus(): void;
        reset(): void;
        add(item: StoreItem): void;
        get(id: string): StoreItem | undefined;
        update(id: string, newOptions: DeepPartial<StoreItem>): void;
        updateAll(updateItem: (item: StoreItem) => StoreItem): void;
        remove(id: string): void;
        clearItems(): void;
        addQueueItem(item: StoreItem): void;
        getQueueItem(id: string): StoreItem | undefined;
        updateQueueItem(id: string, newOptions: DeepPartial<StoreItem>): void;
        removeQueueItem(id: string): void;
        addFromQueue(): void;
        clearQueue(): void;
        clearProxy(id: string, isDestroy?: boolean): void;
        pushProxy<T extends Obj = Obj>(incomingOptions: PushOptionsWithInternals<T>): void;
        pauseTimeouts(): void;
        resumeTimeouts(): void;
        updateClass(id: string, animationClass: string | undefined, onEnd?: () => void): void;
        addEnterClass(id: string): void;
        addLeaveClass(id: string): void;
        updatePositions(type?: TransitionType): void;
    };
    push: Push;
};

export declare const darkTheme: NotivueTheme;

export declare type DeepPartial<T> = {
    [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];
};

declare type DeepRequired<T> = {
    [K in keyof T]-?: T[K] extends object ? DeepRequired<T[K]> : T[K];
};

declare type ErrorColorsVars = '--nv-error-fg' | '--nv-error-bg' | '--nv-error-border' | '--nv-error-accent';

export declare interface ExposedInternalItemData extends NotificationClearMethods {
    createdAt: number;
}

export declare const filledIcons: NotivueIcons;

export declare interface HiddenInternalItemData {
    timeout: number | undefined | (() => void) | void;
    elapsed: number;
    resumedAt: number;
    positionStyles?: CSSProperties;
    animationClass?: string;
    onAnimationstart?: (event: AnimationEvent) => void;
    onAnimationend?: (event: AnimationEvent) => void;
}

declare type InfoColorsVars = '--nv-info-fg' | '--nv-info-bg' | '--nv-info-border' | '--nv-info-accent';

/** Options added internally when creating a notification. */
export declare type InternalItemData = ExposedInternalItemData & HiddenInternalItemData;

/** Added in background after calling push() */
export declare type InternalPushOptions = {
    id: string;
    type: NotificationType;
};

export declare const lightTheme: NotivueTheme;

export declare const materialTheme: NotivueTheme;

export declare interface NotificationClearMethods {
    clear: () => void;
    destroy: () => void;
}

declare interface NotificationOptions_2 {
    /** String to use as default title, an empty string doesn't render the title. */
    title?: string | Ref<string>;
    /** String to use as default message. */
    message?: string | Ref<string>;
    /** Duration of the notification. */
    duration?: number;
    /** Value of `aria-live` attribute. */
    ariaLive?: 'polite' | 'assertive';
    /** Value of `role` attribute. */
    ariaRole?: 'alert' | 'status';
}
export { NotificationOptions_2 as NotificationOptions }

export declare const Notifications: DefineComponent<{
    item: {
        type: PropType<NotivueItem>;
        required: true;
    };
    icons: {
        type: PropType<Partial<Record<NotificationType | "close", string | Component | null | undefined>>>;
        default: () => Partial<Record<NotificationType | "close", string | Component | null | undefined>>;
    };
    theme: {
        type: PropType<Partial<Record<("--nv-width" | "--nv-min-width" | "--nv-spacing" | "--nv-radius" | "--nv-border-width" | "--nv-icon-size" | "--nv-title-size" | "--nv-message-size" | "--nv-shadow" | "--nv-tip-width" | "--nv-y-align") | ("--nv-global-bg" | "--nv-global-fg" | "--nv-global-accent" | "--nv-global-border") | ("--nv-success-fg" | "--nv-success-bg" | "--nv-success-border" | "--nv-success-accent") | ("--nv-error-fg" | "--nv-error-bg" | "--nv-error-border" | "--nv-error-accent") | ("--nv-warning-fg" | "--nv-warning-bg" | "--nv-warning-border" | "--nv-warning-accent") | ("--nv-info-fg" | "--nv-info-bg" | "--nv-info-border" | "--nv-info-accent") | ("--nv-promise-fg" | "--nv-promise-bg" | "--nv-promise-border" | "--nv-promise-accent"), string>>>;
        default: () => Partial<Record<("--nv-width" | "--nv-min-width" | "--nv-spacing" | "--nv-radius" | "--nv-border-width" | "--nv-icon-size" | "--nv-title-size" | "--nv-message-size" | "--nv-shadow" | "--nv-tip-width" | "--nv-y-align") | ("--nv-global-bg" | "--nv-global-fg" | "--nv-global-accent" | "--nv-global-border") | ("--nv-success-fg" | "--nv-success-bg" | "--nv-success-border" | "--nv-success-accent") | ("--nv-error-fg" | "--nv-error-bg" | "--nv-error-border" | "--nv-error-accent") | ("--nv-warning-fg" | "--nv-warning-bg" | "--nv-warning-border" | "--nv-warning-accent") | ("--nv-info-fg" | "--nv-info-bg" | "--nv-info-border" | "--nv-info-accent") | ("--nv-promise-fg" | "--nv-promise-bg" | "--nv-promise-border" | "--nv-promise-accent"), string>>;
    };
    closeAriaLabel: {
        type: PropType<string>;
        default: string;
    };
    hideClose: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    item: {
        type: PropType<NotivueItem>;
        required: true;
    };
    icons: {
        type: PropType<Partial<Record<NotificationType | "close", string | Component | null | undefined>>>;
        default: () => Partial<Record<NotificationType | "close", string | Component | null | undefined>>;
    };
    theme: {
        type: PropType<Partial<Record<("--nv-width" | "--nv-min-width" | "--nv-spacing" | "--nv-radius" | "--nv-border-width" | "--nv-icon-size" | "--nv-title-size" | "--nv-message-size" | "--nv-shadow" | "--nv-tip-width" | "--nv-y-align") | ("--nv-global-bg" | "--nv-global-fg" | "--nv-global-accent" | "--nv-global-border") | ("--nv-success-fg" | "--nv-success-bg" | "--nv-success-border" | "--nv-success-accent") | ("--nv-error-fg" | "--nv-error-bg" | "--nv-error-border" | "--nv-error-accent") | ("--nv-warning-fg" | "--nv-warning-bg" | "--nv-warning-border" | "--nv-warning-accent") | ("--nv-info-fg" | "--nv-info-bg" | "--nv-info-border" | "--nv-info-accent") | ("--nv-promise-fg" | "--nv-promise-bg" | "--nv-promise-border" | "--nv-promise-accent"), string>>>;
        default: () => Partial<Record<("--nv-width" | "--nv-min-width" | "--nv-spacing" | "--nv-radius" | "--nv-border-width" | "--nv-icon-size" | "--nv-title-size" | "--nv-message-size" | "--nv-shadow" | "--nv-tip-width" | "--nv-y-align") | ("--nv-global-bg" | "--nv-global-fg" | "--nv-global-accent" | "--nv-global-border") | ("--nv-success-fg" | "--nv-success-bg" | "--nv-success-border" | "--nv-success-accent") | ("--nv-error-fg" | "--nv-error-bg" | "--nv-error-border" | "--nv-error-accent") | ("--nv-warning-fg" | "--nv-warning-bg" | "--nv-warning-border" | "--nv-warning-accent") | ("--nv-info-fg" | "--nv-info-bg" | "--nv-info-border" | "--nv-info-accent") | ("--nv-promise-fg" | "--nv-promise-bg" | "--nv-promise-border" | "--nv-promise-accent"), string>>;
    };
    closeAriaLabel: {
        type: PropType<string>;
        default: string;
    };
    hideClose: {
        type: PropType<boolean>;
        default: boolean;
    };
}>>, {
    icons: Partial<Record<NotificationType | "close", string | Component | null | undefined>>;
    theme: Partial<Record<("--nv-width" | "--nv-min-width" | "--nv-spacing" | "--nv-radius" | "--nv-border-width" | "--nv-icon-size" | "--nv-title-size" | "--nv-message-size" | "--nv-shadow" | "--nv-tip-width" | "--nv-y-align") | ("--nv-global-bg" | "--nv-global-fg" | "--nv-global-accent" | "--nv-global-border") | ("--nv-success-fg" | "--nv-success-bg" | "--nv-success-border" | "--nv-success-accent") | ("--nv-error-fg" | "--nv-error-bg" | "--nv-error-border" | "--nv-error-accent") | ("--nv-warning-fg" | "--nv-warning-bg" | "--nv-warning-border" | "--nv-warning-accent") | ("--nv-info-fg" | "--nv-info-bg" | "--nv-info-border" | "--nv-info-accent") | ("--nv-promise-fg" | "--nv-promise-bg" | "--nv-promise-border" | "--nv-promise-accent"), string>>;
    closeAriaLabel: string;
    hideClose: boolean;
}, {}>;

export declare type NotificationType = 'success' | 'error' | 'info' | 'warning' | 'promise' | 'promise-resolve' | 'promise-reject';

export declare const Notivue: __VLS_WithTemplateSlots<DefineComponent<{
    class: {
        type: PropType<string | Record<string, boolean> | (string | Record<string, boolean>)[]>;
    };
    containersTabIndex: {
        type: PropType<ContainersTabIndexMap>;
    };
    listAriaLabel: {
        type: PropType<string>;
        default: string;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    class: {
        type: PropType<string | Record<string, boolean> | (string | Record<string, boolean>)[]>;
    };
    containersTabIndex: {
        type: PropType<ContainersTabIndexMap>;
    };
    listAriaLabel: {
        type: PropType<string>;
        default: string;
    };
}>>, {
    listAriaLabel: string;
}, {}>, {
    default(item: NotivueItem & {
        key?: string | undefined;
    }): Component;
}>;

export declare const notivue: {
    install(app: App, config?: NotivueConfig): void;
};

export declare type NotivueAnimations = {
    enter?: string;
    leave?: string;
    clearAll?: string;
};

export declare interface NotivueComputedEntries {
    entries: ComputedRef<NotivueItem[]>;
    queue: ComputedRef<NotivueItem[]>;
}

export declare interface NotivueConfig {
    /** Whether to pause all notifications when hovering over them with mouse. */
    pauseOnHover?: boolean;
    /** Whether to pause all notifications when tapping on them with touch devices. */
    pauseOnTouch?: boolean;
    /** Whether to pause all notifications when switching tabs or window. */
    pauseOnTabChange?: boolean;
    /** Wheter to enqueue notifications when limit is reached. */
    enqueue?: boolean;
    /** Position of notifications, one of 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', 'bottom-right'. */
    position?: Position;
    /** Notification options for each type. */
    notifications?: Partial<Record<NotificationType | 'global', NotificationOptions_2>>;
    /** Animation classes for `enter`, `leave` and `clearAll`. */
    animations?: NotivueAnimations;
    /** Tag or element to which the stream will be teleported. */
    teleportTo?: string | HTMLElement;
    /** Notifications limit. Defaults to `Infinity`. */
    limit?: number;
}

export declare type NotivueConfigRequired = DeepRequired<NotivueConfig>;

export declare type NotivueElements = 'ol' | 'li' | 'item';

export declare type NotivueIcons = Partial<Record<NotificationType | 'close', Component | string | null | undefined>>;

/** Portion of the store item exposed to slot */
export declare type NotivueItem<T extends Obj = Obj> = Omit<StoreItem<T>, keyof HiddenInternalItemData>;

export declare const NotivueKeyboard: __VLS_WithTemplateSlots_3<DefineComponent<{
    comboKey: {
        type: PropType<string>;
        default: string;
    };
    handleClicks: {
        type: PropType<boolean>;
        default: boolean;
    };
    leaveMessage: {
        type: PropType<string>;
        default: string;
    };
    emptyMessage: {
        type: PropType<string>;
        default: string;
    };
    renderAnnouncement: {
        type: PropType<boolean>;
        default: boolean;
    };
    maxAnnouncements: {
        type: PropType<number>;
        default: number;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    comboKey: {
        type: PropType<string>;
        default: string;
    };
    handleClicks: {
        type: PropType<boolean>;
        default: boolean;
    };
    leaveMessage: {
        type: PropType<string>;
        default: string;
    };
    emptyMessage: {
        type: PropType<string>;
        default: string;
    };
    renderAnnouncement: {
        type: PropType<boolean>;
        default: boolean;
    };
    maxAnnouncements: {
        type: PropType<number>;
        default: number;
    };
}>>, {
    comboKey: string;
    handleClicks: boolean;
    leaveMessage: string;
    emptyMessage: string;
    renderAnnouncement: boolean;
    maxAnnouncements: number;
}, {}>, {
    default(props: {
        elementsTabIndex: TabIndexValue;
        containersTabIndex: ContainersTabIndexMap;
    }): Component;
}>;

export declare interface NotivueKeyboardData {
    /**
     * Reactive tab index value for the custom notification focusable elements tabindex.
     *
     * Meant to be added to the custom notification elements via `:tabindex="elementsTabIndex"`.
     */
    elementsTabIndex: Ref<TabIndexValue>;
    /**
     * Reactive map of tab index values for the notification containers.
     *
     * Meant to be passed as prop to Notivue via `:containersTabIndex="containersTabIndex"`.
     */
    containersTabIndex: ComputedRef<ContainersTabIndexMap>;
}

export declare interface NotivueKeyboardProps {
    /**
     * Key to combine with Shift to enter or exit the stream.
     *
     * @default "n"
     */
    comboKey?: string;
    /**
     * Whether to focus next candidate or exit the stream after pressing
     * any button or link inside a notification.
     *
     * @default true
     */
    handleClicks?: boolean;
    /**
     * Text to be announced when leaving the stream
     *
     * @default "You're leaving the notifications stream. Press Control + N to navigate it again."
     */
    leaveMessage?: string;
    /**
     * Text to be announced when attempting to navigate the stream but no candidates are available.
     *
     * @default "No notifications to navigate"
     */
    emptyMessage?: string;
    /**
     * Whether to render the enter/leave notification or just announce it via screen reader.
     *
     * @default true
     */
    renderAnnouncement?: boolean;
    /**
     * Maximum times to announce that the user is leaving the stream.
     *
     * @default 3
     */
    maxAnnouncements?: number;
}

export declare type NotivueReactiveConfig = NotivueStore['config'];

export declare type NotivueSlot = NotivueItem;

export declare type NotivueStore = ReturnType<typeof createStore>;

export declare const NotivueSwipe: __VLS_WithTemplateSlots_2<DefineComponent<{
    item: {
        type: PropType<NotivueItem>;
        required: true;
    };
    exclude: {
        type: PropType<string>;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    touchOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    threshold: {
        type: PropType<number>;
        default: number;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    item: {
        type: PropType<NotivueItem>;
        required: true;
    };
    exclude: {
        type: PropType<string>;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    touchOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    threshold: {
        type: PropType<number>;
        default: number;
    };
}>>, {
    exclude: string;
    disabled: boolean;
    touchOnly: boolean;
    threshold: number;
}, {}>, {
    default?(_: {}): any;
}>;

export declare interface NotivueSwipeProps {
    /** Notivue's exposed notification item. */
    item: NotivueItem;
    /**
     * Whether to enable clear on swipe only on touch interactions.
     */
    touchOnly?: boolean;
    /** A [querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll)
     * string that specifies elements to be exempted from the swipe action.
     *
     * @default "a, button"
     */
    exclude?: string;
    /** Whether to disable the swipe gesture or not.
     * Useful for disabling the behavior on desktop devices, for example.
     *
     * @default false
     */
    disabled?: boolean;
    /** Fraction of notification's width needed to be swiped for clearing.
     * For instance, a threshold of 0.5 indicates 50% of the notification's width must be swiped.
     *
     * @default 0.5
     */
    threshold?: number;
}

export declare type NotivueTheme = Partial<Record<ThemeVars, string>>;

export declare type Obj = Record<string, any>;

export declare const outlinedIcons: NotivueIcons;

export declare const pastelTheme: NotivueTheme;

export declare type Position = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';

declare type PromiseColorsVars = '--nv-promise-fg' | '--nv-promise-bg' | '--nv-promise-border' | '--nv-promise-accent';

export declare interface Push {
    success: PushStatic;
    error: PushStatic;
    info: PushStatic;
    warning: PushStatic;
    promise: PushPromise;
    clearAll: () => void;
    destroyAll: () => void;
}

/** Defined by the user when calling push() */
export declare type PushOptions<T extends Obj = Obj> = NotificationOptions_2 & PushProps<T> & PushSpecificOptions;

export declare type PushOptionsWithInternals<T extends Obj = Obj> = PushOptions<T> & InternalPushOptions;

export declare type PushParameter<T extends Obj = Obj> = PushOptions<T> | NotificationOptions_2['message'];

export declare type PushPromise = <T extends Obj = Obj>(options: PushParameter<T>) => NotificationClearMethods & PushPromiseReturn;

export declare interface PushPromiseReturn {
    resolve: <T extends Obj = Obj>(options: PushParameter<T>) => NotificationClearMethods;
    reject: <T extends Obj = Obj>(options: PushParameter<T>) => NotificationClearMethods;
}

export declare interface PushProps<T extends Obj = Obj> {
    props?: T;
}

export declare interface PushSpecificOptions {
    skipQueue?: boolean;
    ariaLiveOnly?: boolean;
}

export declare type PushStatic = <T extends Obj = Obj>(options: PushParameter<T>) => NotificationClearMethods;

export declare const slateTheme: NotivueTheme;

/** Final shape of the store item */
export declare type StoreItem<T extends Obj = Obj> = DeepRequired<NotificationOptions_2> & Required<PushProps<T>> & InternalPushOptions & InternalItemData & PushSpecificOptions;

declare type SuccessColorsVars = '--nv-success-fg' | '--nv-success-bg' | '--nv-success-border' | '--nv-success-accent';

export declare type TabIndexValue = 0 | -1;

declare type ThemeGlobalColorsVars = '--nv-global-bg' | '--nv-global-fg' | '--nv-global-accent' | '--nv-global-border';

declare type ThemeLayoutVars = '--nv-width' | '--nv-min-width' | '--nv-spacing' | '--nv-radius' | '--nv-border-width' | '--nv-icon-size' | '--nv-title-size' | '--nv-message-size' | '--nv-shadow' | '--nv-tip-width' | '--nv-y-align';

export declare type ThemeNames = 'lightTheme' | 'pastelTheme' | 'materialTheme' | 'darkTheme' | 'slateTheme';

declare type ThemeVars = ThemeLayoutVars | ThemeGlobalColorsVars | SuccessColorsVars | ErrorColorsVars | WarningColorsVars | InfoColorsVars | PromiseColorsVars;

export declare type ToMappedRefs<T> = {
    [K in keyof T]: ShallowRef<T[K]>;
};

declare enum TransitionType {
    PUSH = 0,
    HEIGHT = 1,
    SILENT = 2
}

export declare function useNotifications(): NotivueComputedEntries;

/**
 * The following composables might be called on the server because
 * are exposed to the user. In such case we return an object
 * with the same shape.
 */
declare function useNotivue(): NotivueReactiveConfig;
export { useNotivue }
export { useNotivue as useNotivueConfig }

export declare function useNotivueKeyboard(): NotivueKeyboardData;

export declare function usePush(): Push;

export declare type UserPushOptions = PushOptions;

declare type WarningColorsVars = '--nv-warning-fg' | '--nv-warning-bg' | '--nv-warning-border' | '--nv-warning-accent';

export { }
