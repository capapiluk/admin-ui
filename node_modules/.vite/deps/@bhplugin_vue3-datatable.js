import "./chunk-763AARI2.js";
import {
  Fragment,
  computed,
  createBaseVNode,
  createCommentVNode,
  createElementBlock,
  createStaticVNode,
  createTextVNode,
  createVNode,
  defineComponent,
  normalizeClass,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  ref,
  renderList,
  renderSlot,
  toDisplayString,
  unref,
  useSlots,
  vModelCheckbox,
  vModelSelect,
  vModelText,
  vShow,
  watch,
  withDirectives,
  withModifiers
} from "./chunk-6XECGMJ4.js";
import "./chunk-CF3WPAMV.js";

// node_modules/@bhplugin/vue3-datatable/dist/vue3-datatable.js
var Ee = { class: "bh-filter-menu bh-absolute bh-z-[1] bh-bg-white bh-shadow-md bh-rounded-md bh-top-full bh-right-0 bh-w-32 bh-mt-1" };
var Ie = ["onClick"];
var Ge = defineComponent({
  __name: "column-filter",
  props: ["column"],
  emits: ["close", "filterChange"],
  setup(C, { emit: m }) {
    const a = C;
    onBeforeUnmount(() => {
      document.removeEventListener("click", l);
    }), onMounted(() => {
      document.addEventListener("click", l);
    });
    const l = () => {
      m("close");
    }, b = (w) => {
      a.column.condition = w, w === "" && (a.column.value = ""), m("filterChange", a.column);
    };
    return (w, o) => (openBlock(), createElementBlock("div", Ee, [
      createBaseVNode("div", {
        class: "bh-text-[13px] bh-font-normal bh-rounded bh-overflow-hidden",
        onClick: withModifiers(l, ["stop"])
      }, [
        createBaseVNode("button", {
          type: "button",
          class: normalizeClass({ active: a.column.condition === "" }),
          onClick: o[0] || (o[0] = (s) => b(""))
        }, "No filter", 2),
        a.column.type === "string" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "contain" }),
            onClick: o[1] || (o[1] = (s) => b("contain"))
          }, "Contain", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "not_contain" }),
            onClick: o[2] || (o[2] = (s) => b("not_contain"))
          }, "Not contain", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "equal" }),
            onClick: o[3] || (o[3] = (s) => b("equal"))
          }, "Equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "not_equal" }),
            onClick: o[4] || (o[4] = (s) => b("not_equal"))
          }, "Not equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "start_with" }),
            onClick: o[5] || (o[5] = (s) => b("start_with"))
          }, "Starts with", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "end_with" }),
            onClick: o[6] || (o[6] = (s) => b("end_with"))
          }, "Ends with", 2)
        ], 64)) : a.column.type === "number" ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "equal" }),
            onClick: o[7] || (o[7] = (s) => b("equal"))
          }, "Equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "not_equal" }),
            onClick: o[8] || (o[8] = (s) => b("not_equal"))
          }, "Not Equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "greater_than" }),
            onClick: o[9] || (o[9] = (s) => b("greater_than"))
          }, "Greater than", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "greater_than_equal" }),
            onClick: o[10] || (o[10] = (s) => b("greater_than_equal"))
          }, "Greater than or equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "less_than" }),
            onClick: o[11] || (o[11] = (s) => b("less_than"))
          }, "Less than", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "less_than_equal" }),
            onClick: o[12] || (o[12] = (s) => b("less_than_equal"))
          }, "Less than or equal", 2)
        ], 64)) : a.column.type === "date" ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "equal" }),
            onClick: o[13] || (o[13] = (s) => b("equal"))
          }, "Equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "not_equal" }),
            onClick: o[14] || (o[14] = (s) => b("not_equal"))
          }, "Not equal", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "greater_than" }),
            onClick: o[15] || (o[15] = (s) => b("greater_than"))
          }, "Greater than", 2),
          createBaseVNode("button", {
            type: "button",
            class: normalizeClass({ active: a.column.condition === "less_than" }),
            onClick: o[16] || (o[16] = (s) => b("less_than"))
          }, "Less than", 2)
        ], 64)) : createCommentVNode("", true),
        createBaseVNode("button", {
          type: "button",
          class: normalizeClass({ active: a.column.condition === "is_null" }),
          onClick: o[17] || (o[17] = (s) => b("is_null"))
        }, "Is null", 2),
        createBaseVNode("button", {
          type: "button",
          class: normalizeClass({ active: a.column.condition === "is_not_null" }),
          onClick: o[18] || (o[18] = (s) => b("is_not_null"))
        }, "Not null", 2)
      ], 8, Ie)
    ]));
  }
});
var Q = (C, m) => {
  const a = C.__vccOpts || C;
  for (const [l, b] of m)
    a[l] = b;
  return a;
};
var Ke = {};
var Je = {
  version: "1.1",
  viewBox: "0 0 17 12",
  xmlns: "http://www.w3.org/2000/svg"
};
var We = createBaseVNode("g", {
  fill: "none",
  "fill-rule": "evenodd"
}, [
  createBaseVNode("g", {
    transform: "translate(-9 -11)",
    fill: "currentColor",
    "fill-rule": "nonzero"
  }, [
    createBaseVNode("path", { d: "m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z" })
  ])
], -1);
var Ye = [
  We
];
function Qe(C, m) {
  return openBlock(), createElementBlock("svg", Je, Ye);
}
var me = Q(Ke, [["render", Qe]]);
var Xe = {};
var Ze = {
  viewBox: "0 0 24 24",
  width: "24",
  height: "24",
  stroke: "currentColor",
  "stroke-width": "3",
  fill: "none",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  class: "css-i6dzq1"
};
var je = createBaseVNode("line", {
  x1: "5",
  y1: "12",
  x2: "19",
  y2: "12"
}, null, -1);
var et = [
  je
];
function tt(C, m) {
  return openBlock(), createElementBlock("svg", Ze, et);
}
var lt = Q(Xe, [["render", tt]]);
var nt = {};
var ot = {
  viewBox: "0 0 24 24",
  width: "24",
  height: "24",
  stroke: "currentColor",
  "stroke-width": "1.5",
  fill: "none",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  class: "css-i6dzq1"
};
var st = createBaseVNode("polygon", { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" }, null, -1);
var at = [
  st
];
function it(C, m) {
  return openBlock(), createElementBlock("svg", ot, at);
}
var rt = Q(nt, [["render", it]]);
var ut = { key: "hdrrow" };
var ct = { class: "bh-checkbox" };
var ht = ["onClick"];
var dt = {
  width: "16",
  height: "16",
  viewBox: "0 0 14 14",
  fill: "none"
};
var vt = {
  key: 0,
  class: "bh-filter bh-relative"
};
var ft = ["onUpdate:modelValue"];
var pt = ["onUpdate:modelValue"];
var bt = ["onUpdate:modelValue"];
var gt = ["onUpdate:modelValue"];
var yt = createBaseVNode("option", { value: void 0 }, "All", -1);
var mt = createBaseVNode("option", { value: true }, "True", -1);
var Ct = createBaseVNode("option", { value: false }, "False", -1);
var kt = [
  yt,
  mt,
  Ct
];
var _t = ["onClick"];
var fe = defineComponent({
  __name: "column-header",
  props: ["all", "currentSortColumn", "currentSortDirection", "isOpenFilter", "isFooter", "checkAll"],
  emits: ["selectAll", "sortChange", "filterChange", "toggleFilterMenu"],
  setup(C, { emit: m }) {
    const a = C, l = ref(null);
    return watch(() => a.checkAll, () => {
      l.value && (l.value.indeterminate = a.checkAll !== 0 ? !a.checkAll : false, l.value.checked = a.checkAll);
    }), (w, o) => (openBlock(), createElementBlock("tr", ut, [
      a.all.hasCheckbox ? (openBlock(), createElementBlock("th", {
        key: "chkall",
        class: normalizeClass(["bh-w-px", {
          "bh-sticky bh-bg-blue-light bh-z-[1]": a.all.stickyHeader || a.all.stickyFirstColumn,
          "bh-top-0": a.all.stickyHeader,
          "bh-left-0": a.all.stickyFirstColumn
        }])
      }, [
        createBaseVNode("div", ct, [
          createBaseVNode("input", {
            ref_key: "selectedAll",
            ref: l,
            type: "checkbox",
            onClick: o[0] || (o[0] = withModifiers((s) => m("selectAll", s.target.checked), ["stop"]))
          }, null, 512),
          createBaseVNode("div", null, [
            createVNode(me, { class: "check" }),
            createVNode(lt, { class: "intermediate" })
          ])
        ])
      ], 2)) : createCommentVNode("", true),
      (openBlock(true), createElementBlock(Fragment, null, renderList(a.all.columns, (s, J) => (openBlock(), createElementBlock(Fragment, null, [
        s.hide ? createCommentVNode("", true) : (openBlock(), createElementBlock("th", {
          key: s.field,
          class: normalizeClass(["bh-select-none bh-z-[1]", [
            a.all.sortable && s.sort ? "bh-cursor-pointer" : "",
            J === 0 && a.all.stickyFirstColumn ? "bh-sticky bh-left-0 bh-bg-blue-light" : "",
            a.all.hasCheckbox && J === 0 && a.all.stickyFirstColumn ? "bh-left-[52px]" : ""
          ]]),
          style: normalizeStyle({
            width: s.width,
            "min-width": s.minWidth,
            "max-width": s.maxWidth
          })
        }, [
          createBaseVNode("div", {
            class: normalizeClass(["bh-flex bh-items-center", [s.headerClass ? s.headerClass : ""]]),
            onClick: (p) => a.all.sortable && s.sort && m("sortChange", s.field)
          }, [
            createTextVNode(toDisplayString(s.title) + " ", 1),
            a.all.sortable && s.sort ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(["bh-ml-3 bh-sort bh-flex bh-items-center", [a.currentSortColumn, a.currentSortDirection]])
            }, [
              (openBlock(), createElementBlock("svg", dt, [
                createBaseVNode("polygon", {
                  points: "3.11,6.25 10.89,6.25 7,1.75 ",
                  fill: "currentColor",
                  class: normalizeClass(["bh-text-black/20", [C.currentSortColumn === s.field && C.currentSortDirection === "asc" ? "!bh-text-primary" : ""]])
                }, null, 2),
                createBaseVNode("polygon", {
                  points: "7,12.25 10.89,7.75 3.11,7.75 ",
                  fill: "currentColor",
                  class: normalizeClass(["bh-text-black/20", [C.currentSortColumn === s.field && C.currentSortDirection === "desc" ? "!bh-text-primary" : ""]])
                }, null, 2)
              ]))
            ], 2)) : createCommentVNode("", true)
          ], 10, ht),
          a.all.columnFilter && !a.isFooter ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            s.filter ? (openBlock(), createElementBlock("div", vt, [
              s.type === "string" ? withDirectives((openBlock(), createElementBlock("input", {
                key: 0,
                "onUpdate:modelValue": (p) => s.value = p,
                type: "text",
                class: "bh-form-control",
                onKeyup: o[1] || (o[1] = (p) => m("filterChange"))
              }, null, 40, ft)), [
                [
                  vModelText,
                  s.value,
                  void 0,
                  { trim: true }
                ]
              ]) : createCommentVNode("", true),
              s.type === "number" ? withDirectives((openBlock(), createElementBlock("input", {
                key: 1,
                "onUpdate:modelValue": (p) => s.value = p,
                type: "number",
                class: "bh-form-control",
                onKeyup: o[2] || (o[2] = (p) => m("filterChange"))
              }, null, 40, pt)), [
                [
                  vModelText,
                  s.value,
                  void 0,
                  {
                    number: true,
                    trim: true
                  }
                ]
              ]) : s.type === "date" ? withDirectives((openBlock(), createElementBlock("input", {
                key: 2,
                "onUpdate:modelValue": (p) => s.value = p,
                type: "date",
                class: "bh-form-control",
                onChange: o[3] || (o[3] = (p) => m("filterChange"))
              }, null, 40, bt)), [
                [vModelText, s.value]
              ]) : s.type === "bool" ? withDirectives((openBlock(), createElementBlock("select", {
                key: 3,
                "onUpdate:modelValue": (p) => s.value = p,
                class: "bh-form-control",
                onChange: o[4] || (o[4] = (p) => m("filterChange")),
                onClick: o[5] || (o[5] = (p) => a.isOpenFilter = null)
              }, kt, 40, gt)), [
                [vModelSelect, s.value]
              ]) : createCommentVNode("", true),
              s.type !== "bool" ? (openBlock(), createElementBlock("button", {
                key: 4,
                type: "button",
                onClick: withModifiers((p) => m("toggleFilterMenu", s), ["stop"])
              }, [
                createVNode(rt, { class: "bh-w-4" })
              ], 8, _t)) : createCommentVNode("", true),
              withDirectives(createVNode(Ge, {
                column: s,
                type: s.type,
                onClose: o[6] || (o[6] = (p) => m("toggleFilterMenu", null)),
                onFilterChange: o[7] || (o[7] = (p) => m("filterChange"))
              }, null, 8, ["column", "type"]), [
                [vShow, a.isOpenFilter === s.field]
              ])
            ])) : createCommentVNode("", true)
          ], 64)) : createCommentVNode("", true)
        ], 6))
      ], 64))), 256))
    ]));
  }
});
var wt = {};
var St = {
  width: "84",
  height: "84",
  viewBox: "0 0 24 24",
  class: "bh-loader bh-text-primary"
};
var $t = createStaticVNode('<circle cx="18" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".67" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"></animate></circle><circle cx="12" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin=".33" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"></animate></circle><circle cx="6" cy="12" r="0" fill="currentColor"><animate attributeName="r" begin="0" calcMode="spline" dur="1.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"></animate></circle>', 3);
var xt = [
  $t
];
function Ft(C, m) {
  return openBlock(), createElementBlock("svg", St, xt);
}
var Mt = Q(wt, [["render", Ft]]);
var qt = { class: "bh-datatable bh-antialiased bh-relative bh-text-black bh-text-sm bh-font-normal" };
var Lt = ["onClick"];
var zt = { class: "bh-checkbox" };
var At = ["value"];
var Bt = ["innerHTML"];
var Nt = { key: 1 };
var Dt = ["colspan"];
var Rt = ["colspan"];
var Pt = createBaseVNode("div", { class: "bh-skeleton-box bh-h-8" }, null, -1);
var Ht = [
  Pt
];
var Ot = {
  key: 0,
  class: "bh-absolute bh-inset-0 bh-bg-blue-light/50 bh-grid bh-place-content-center"
};
var Tt = { class: "bh-flex bh-items-center bh-flex-wrap bh-flex-col sm:bh-flex-row bh-gap-4" };
var Vt = { class: "bh-pagination-info bh-flex bh-items-center" };
var Ut = { class: "bh-mr-2" };
var Et = ["value"];
var It = { class: "bh-pagination-number sm:bh-ml-auto bh-inline-flex bh-items-center bh-space-x-1" };
var Gt = ["innerHTML"];
var Kt = {
  key: 1,
  "aria-hidden": "true",
  width: "14",
  height: "14",
  viewBox: "0 0 16 16"
};
var Jt = createBaseVNode("g", {
  fill: "currentColor",
  "fill-rule": "evenodd"
}, [
  createBaseVNode("path", { d: "M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" }),
  createBaseVNode("path", { d: "M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" })
], -1);
var Wt = [
  Jt
];
var Yt = ["innerHTML"];
var Qt = {
  key: 1,
  "aria-hidden": "true",
  width: "14",
  height: "14",
  viewBox: "0 0 16 16"
};
var Xt = createBaseVNode("path", {
  fill: "currentColor",
  "fill-rule": "evenodd",
  d: "M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"
}, null, -1);
var Zt = [
  Xt
];
var jt = ["onClick"];
var el = ["innerHTML"];
var tl = {
  key: 1,
  "aria-hidden": "true",
  width: "14",
  height: "14",
  viewBox: "0 0 16 16"
};
var ll = createBaseVNode("path", {
  fill: "currentColor",
  "fill-rule": "evenodd",
  d: "M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8L4.646 2.354a.5.5 0 0 1 0-.708z"
}, null, -1);
var nl = [
  ll
];
var ol = ["innerHTML"];
var sl = {
  key: 1,
  "aria-hidden": "true",
  width: "14",
  height: "14",
  viewBox: "0 0 16 16"
};
var al = createBaseVNode("g", {
  fill: "currentColor",
  "fill-rule": "evenodd"
}, [
  createBaseVNode("path", { d: "M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8L3.646 2.354a.5.5 0 0 1 0-.708z" }),
  createBaseVNode("path", { d: "M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8L7.646 2.354a.5.5 0 0 1 0-.708z" })
], -1);
var il = [
  al
];
var vl = defineComponent({
  __name: "custom-table",
  props: {
    loading: { type: Boolean, default: false },
    isServerMode: { type: Boolean, default: false },
    skin: { default: "bh-table-striped bh-table-hover" },
    totalRows: { default: 0 },
    rows: { default: () => [] },
    columns: { default: () => [] },
    hasCheckbox: { type: Boolean, default: false },
    search: { default: "" },
    columnChooser: { type: Boolean, default: false },
    page: { default: 1 },
    pageSize: { default: 10 },
    pageSizeOptions: { default: () => [10, 20, 30, 50, 100] },
    showPageSize: { type: Boolean, default: true },
    rowClass: { default: [] },
    cellClass: { default: [] },
    sortable: { type: Boolean, default: false },
    sortColumn: { default: "id" },
    sortDirection: { default: "asc" },
    columnFilter: { type: Boolean, default: false },
    pagination: { type: Boolean, default: true },
    showNumbers: { type: Boolean, default: true },
    showNumbersCount: { default: 5 },
    showFirstPage: { type: Boolean, default: true },
    showLastPage: { type: Boolean, default: true },
    firstArrow: { default: "" },
    lastArrow: { default: "" },
    nextArrow: { default: "" },
    previousArrow: { default: "" },
    paginationInfo: { default: "Showing {0} to {1} of {2} entries" },
    noDataContent: { default: "No data available" },
    stickyHeader: { type: Boolean, default: false },
    height: { default: "500px" },
    stickyFirstColumn: { type: Boolean, default: false },
    cloneHeaderInFooter: { type: Boolean, default: false },
    selectRowOnClick: { type: Boolean, default: false }
  },
  emits: ["change", "sortChange", "searchChange", "pageChange", "pageSizeChange", "rowSelect", "filterChange", "rowClick", "rowDBClick"],
  setup(C, { expose: m, emit: a }) {
    var ce;
    const l = C, b = useSlots();
    for (const t of l.columns || []) {
      const e = ((ce = t.type) == null ? void 0 : ce.toLowerCase()) || "string";
      t.type = e, t.isUnique = t.isUnique !== void 0 ? t.isUnique : false, t.hide = t.hide !== void 0 ? t.hide : false, t.filter = t.filter !== void 0 ? t.filter : true, t.search = t.search !== void 0 ? t.search : true, t.sort = t.sort !== void 0 ? t.sort : true, t.html = t.html !== void 0 ? t.html : false, t.condition = !e || e === "string" ? "contain" : "equal";
    }
    const w = ref([]), o = ref(l.page), s = ref(l.pagination ? l.pageSize : l.rows.length), J = l.pageSize, p = ref(l.sortColumn), Ce = l.sortColumn, N = ref(l.sortDirection), ke = l.sortDirection, F = ref(l.totalRows), $ = ref([]), X = ref(null), P = ref(l.loading), H = ref(l.search), _e = JSON.parse(JSON.stringify(l.columns)), O = ref(null), te = ref(null);
    let E = ref(0);
    const we = ref(230);
    onMounted(() => {
      z();
    }), m({
      reset() {
        ze();
      },
      getSelectedRows() {
        return Ae();
      },
      getColumnFilters() {
        return Be();
      },
      clearSelectedRows() {
        return Ne();
      },
      selectRow(t) {
        re(t);
      },
      unselectRow(t) {
        ue(t);
      },
      isRowSelected(t) {
        return Y(t);
      }
    });
    const Se = (t, ...e) => t.replace(/{(\d+)}/g, (r, f) => typeof e[f] < "u" ? e[f] : r), _ = computed(() => {
      const t = l.columns.find((e) => e.isUnique);
      return (t == null ? void 0 : t.field) || null;
    }), L = computed(() => {
      const t = s.value < 1 ? 1 : Math.ceil(F.value / s.value);
      return Math.max(t || 0, 1);
    }), le = computed(() => (o.value - 1) * s.value + 1), ne = computed(() => {
      const t = o.value * s.value;
      return F.value >= t ? t : F.value;
    }), $e = computed(() => {
      let t, e;
      return typeof l.showNumbersCount < "u" && l.showNumbersCount < L.value ? (t = Math.max(o.value - Math.floor(l.showNumbersCount / 2), 1), e = t + l.showNumbersCount - 1, e > L.value && (e = L.value, t = e - l.showNumbersCount + 1)) : (t = 1, e = L.value), Array.from(Array(e + 1 - t).keys()).map((k) => t + k);
    }), z = () => {
      var I, he;
      let t = [], e = l.rows || [];
      if (l.isServerMode)
        F.value = l.totalRows || 0, t = e;
      else {
        if ((I = l.columns) == null || I.forEach((n) => {
          n.filter && (n.value !== void 0 && n.value !== null && n.value !== "" || n.condition === "is_null" || n.condition == "is_not_null") && (n.type === "string" ? (n.value && !n.condition && (n.condition = "contain"), n.condition === "contain" ? e = e.filter((u) => {
            var g;
            return (g = v(u, n.field)) == null ? void 0 : g.toString().toLowerCase().includes(n.value.toLowerCase());
          }) : n.condition === "not_contain" ? e = e.filter((u) => {
            var g;
            return !((g = v(u, n.field)) != null && g.toString().toLowerCase().includes(n.value.toLowerCase()));
          }) : n.condition === "equal" ? e = e.filter((u) => {
            var g;
            return ((g = v(u, n.field)) == null ? void 0 : g.toString().toLowerCase()) === n.value.toLowerCase();
          }) : n.condition === "not_equal" ? e = e.filter((u) => {
            var g;
            return ((g = v(u, n.field)) == null ? void 0 : g.toString().toLowerCase()) !== n.value.toLowerCase();
          }) : n.condition == "start_with" ? e = e.filter((u) => {
            var g;
            return ((g = v(u, n.field)) == null ? void 0 : g.toString().toLowerCase().indexOf(n.value.toLowerCase())) === 0;
          }) : n.condition == "end_with" && (e = e.filter((u) => {
            var g;
            return ((g = v(u, n.field)) == null ? void 0 : g.toString().toLowerCase().substr(n.value.length * -1)) === n.value.toLowerCase();
          }))) : n.type === "number" ? (n.value && !n.condition && (n.condition = "equal"), n.condition === "equal" ? e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) === parseFloat(n.value)) : n.condition === "not_equal" ? e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) !== parseFloat(n.value)) : n.condition === "greater_than" ? e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) > parseFloat(n.value)) : n.condition === "greater_than_equal" ? e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) >= parseFloat(n.value)) : n.condition === "less_than" ? e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) < parseFloat(n.value)) : n.condition === "less_than_equal" && (e = e.filter((u) => v(u, n.field) && parseFloat(v(u, n.field)) <= parseFloat(n.value)))) : n.type === "date" ? (n.value && !n.condition && (n.condition = "equal"), n.condition === "equal" ? e = e.filter((u) => v(u, n.field) && W(v(u, n.field)) === n.value) : n.condition === "not_equal" ? e = e.filter((u) => v(u, n.field) && W(v(u, n.field)) !== n.value) : n.condition === "greater_than" ? e = e.filter((u) => v(u, n.field) && W(v(u, n.field)) > n.value) : n.condition === "less_than" && (e = e.filter((u) => v(u, n.field) && W(v(u, n.field)) < n.value))) : n.type === "bool" && (e = e.filter((u) => v(u, n.field) === n.value)), n.condition === "is_null" ? (e = e.filter((u) => v(u, n.field) == null || v(u, n.field) == ""), n.value = "") : n.condition === "is_not_null" && (n.value = "", e = e.filter((u) => v(u, n.field))));
        }), H.value && e.length) {
          let n = [];
          const u = (l.columns || []).filter((g) => g.search && !g.hide).map((g) => g.field);
          for (var r = 0; r < e.length; r++)
            for (var f = 0; f < u.length; f++)
              if ((he = v(e[r], u[f])) != null && he.toString().toLowerCase().includes(H.value.toLowerCase())) {
                n.push(e[r]);
                break;
              }
          e = n;
        }
        var k = new Intl.Collator(void 0, {
          numeric: true,
          sensitivity: "base"
        });
        const De = N.value === "desc" ? -1 : 1;
        e.sort((n, u) => {
          var de, ve;
          const g = (de = p.value) == null ? void 0 : de.split(".").reduce((D, Z) => D == null ? void 0 : D[Z], n), Re = (ve = p.value) == null ? void 0 : ve.split(".").reduce((D, Z) => D == null ? void 0 : D[Z], u);
          return k.compare(g, Re) * De;
        }), F.value = e.length || 0, t = e.slice(le.value - 1, ne.value);
      }
      w.value = t || [];
    };
    watch(
      () => l.loading,
      () => {
        P.value = l.loading;
      }
    );
    const oe = (t) => {
      t ? O.value === t.field ? O.value = null : O.value = t.field : O.value = null;
    }, xe = () => {
      if (o.value == 1)
        return false;
      o.value--;
    }, Fe = (t) => {
      o.value = t;
    }, Me = () => {
      if (o.value >= L.value)
        return false;
      o.value++;
    };
    watch(() => o.value, () => {
      q(false), l.isServerMode ? T("page") : (z(), a("pageChange", o.value));
    }), watch(() => l.rows, () => {
      l.isServerMode || (o.value = 1), q(false), z();
    }), watch(() => s.value, () => {
      q(false), l.isServerMode ? o.value === 1 ? T("pagesize", true) : o.value = 1 : (o.value = 1, z(), a("pageSizeChange", s.value));
    });
    const se = (t) => {
      let e = "asc";
      t == p.value && N.value === "asc" && (e = "desc");
      let r = (o.value - 1) * s.value, f = s.value;
      p.value = t, N.value = e, q(false), z(), l.isServerMode ? T("sort") : a("sortChange", { offset: r, limit: f, field: t, direction: e });
    }, ae = (t) => {
      X.value = t.length && w.value.length && t.length === w.value.length;
      const e = w.value.filter((r, f) => $.value.includes(_.value ? r[_.value] : f));
      a("rowSelect", e);
    };
    watch(() => $.value, ae);
    const q = (t) => {
      t ? $.value = w.value.map((e, r) => _.value ? e[_.value] : r) : $.value = [];
    }, ie = () => {
      q(false), l.isServerMode ? o.value === 1 ? T("filter", true) : o.value = 1 : (o.value = 1, z(), a("filterChange", l.columns));
    };
    watch(() => l.search, () => {
      q(false), l.isServerMode ? o.value === 1 ? T("search", true) : o.value = 1 : (o.value = 1, z(), a("searchChange", H.value));
    }), watch(
      () => l.search,
      () => {
        H.value = l.search;
      }
    );
    const v = (t, e) => e == null ? void 0 : e.split(".").reduce((r, f) => r == null ? void 0 : r[f], t), W = (t) => {
      try {
        if (!t)
          return "";
        const e = new Date(t), r = e.getDate(), f = e.getMonth() + 1;
        return e.getFullYear() + "-" + (f > 9 ? f : "0" + f) + "-" + (r > 9 ? r : "0" + r);
      } catch {
      }
      return "";
    }, qe = (t, e) => {
      E.value++, E.value === 1 ? te.value = setTimeout(() => {
        E.value = 0, l.selectRowOnClick && (Y(e) ? ue(e) : re(e), ae($.value)), a("rowClick", t);
      }, we.value) : E.value === 2 && (clearTimeout(te.value), E.value = 0, a("rowDBClick", t));
    }, T = (t, e = false) => {
      if (l.isServerMode) {
        Le();
        const r = {
          current_page: e ? 1 : o.value,
          pagesize: s.value,
          offset: (o.value - 1) * s.value,
          sort_column: p.value,
          sort_direction: N.value,
          search: H.value,
          column_filters: l.columns,
          change_type: t
        };
        a("change", r);
      }
    }, Le = () => {
      for (let t = 0; t < l.columns.length; t++) {
        let e = l.columns[t];
        e.filter && (e.value !== void 0 && e.value !== null && e.value !== "" || e.condition === "is_null" || e.condition === "is_not_null") && (e.type === "string" && e.value && !e.condition && (e.condition = "contain"), e.type === "number" && e.value && !e.condition && (e.condition = "equal"), e.type === "date" && e.value && !e.condition && (e.condition = "equal"));
      }
    }, ze = () => {
      q(false);
      for (let t = 0; t < l.columns.length; t++)
        l.columns[t] = _e[t];
      H.value = "", s.value = J, p.value = Ce, N.value = ke, l.isServerMode ? o.value === 1 ? T("reset", true) : o.value = 1 : (o.value = 1, z());
    }, Ae = () => w.value.filter((e, r) => $.value.includes(_.value ? e[_.value] : r)), Be = () => l.columns, Ne = () => {
      $.value = [];
    }, re = (t) => {
      if (!Y(t)) {
        const e = w.value.find((r, f) => f === t);
        $.value.push(_.value ? e[_.value] : t);
      }
    }, ue = (t) => {
      if (Y(t)) {
        const e = w.value.find((r, f) => f === t);
        $.value = $.value.filter((r) => r !== (_.value ? e[_.value] : t));
      }
    }, Y = (t) => {
      const e = w.value.find((r, f) => f === t);
      return e ? $.value.includes(_.value ? e[_.value] : t) : false;
    };
    return (t, e) => (openBlock(), createElementBlock("div", qt, [
      createBaseVNode("div", {
        class: normalizeClass(["bh-table-responsive", { "bh-min-h-[300px]": P.value }]),
        style: normalizeStyle({ height: l.stickyHeader && l.height })
      }, [
        createBaseVNode("table", {
          class: normalizeClass([l.skin])
        }, [
          createBaseVNode("thead", {
            class: normalizeClass({ "bh-sticky bh-top-0 bh-z-10": l.stickyHeader })
          }, [
            createVNode(fe, {
              all: l,
              currentSortColumn: p.value,
              currentSortDirection: N.value,
              isOpenFilter: O.value,
              checkAll: X.value,
              onSelectAll: q,
              onSortChange: se,
              onFilterChange: ie,
              onToggleFilterMenu: oe
            }, null, 8, ["currentSortColumn", "currentSortDirection", "isOpenFilter", "checkAll"])
          ], 2),
          createBaseVNode("tbody", null, [
            F.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(w.value, (r, f) => (openBlock(), createElementBlock("tr", {
              key: r[unref(_)] ? r[unref(_)] : f,
              class: normalizeClass([typeof l.rowClass == "function" ? C.rowClass(r) : l.rowClass, l.selectRowOnClick ? "bh-cursor-pointer" : ""]),
              onClick: withModifiers((k) => qe(r, f), ["prevent"])
            }, [
              l.hasCheckbox ? (openBlock(), createElementBlock("td", {
                key: 0,
                class: normalizeClass({
                  "bh-sticky bh-left-0 bh-bg-blue-light": l.stickyFirstColumn
                })
              }, [
                createBaseVNode("div", zt, [
                  withDirectives(createBaseVNode("input", {
                    "onUpdate:modelValue": e[0] || (e[0] = (k) => $.value = k),
                    type: "checkbox",
                    value: r[unref(_)] ? r[unref(_)] : f,
                    onClick: e[1] || (e[1] = withModifiers(() => {
                    }, ["stop"]))
                  }, null, 8, At), [
                    [vModelCheckbox, $.value]
                  ]),
                  createBaseVNode("div", null, [
                    createVNode(me, { class: "check" })
                  ])
                ])
              ], 2)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(l.columns, (k, I) => (openBlock(), createElementBlock(Fragment, null, [
                k.hide ? createCommentVNode("", true) : (openBlock(), createElementBlock("td", {
                  key: k.field,
                  class: normalizeClass([
                    typeof l.cellClass == "function" ? C.cellClass(r) : l.cellClass,
                    I === 0 && l.stickyFirstColumn ? "bh-sticky bh-left-0 bh-bg-blue-light" : "",
                    l.hasCheckbox && I === 0 && l.stickyFirstColumn ? "bh-left-[52px]" : "",
                    k.cellClass ? k.cellClass : ""
                  ])
                }, [
                  unref(b)[k.field] ? renderSlot(t.$slots, k.field, {
                    key: 0,
                    value: r
                  }) : k.cellRenderer ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    innerHTML: k.cellRenderer(r)
                  }, null, 8, Bt)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                    createTextVNode(toDisplayString(v(r, k.field)), 1)
                  ], 64))
                ], 2))
              ], 64))), 256))
            ], 10, Lt))), 128)) : createCommentVNode("", true),
            !F.value && !P.value ? (openBlock(), createElementBlock("tr", Nt, [
              createBaseVNode("td", {
                colspan: l.columns.length + 1
              }, toDisplayString(l.noDataContent), 9, Dt)
            ])) : createCommentVNode("", true),
            !F.value && P.value ? (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList(l.pageSize, (r) => (openBlock(), createElementBlock("tr", {
              key: r,
              class: "!bh-bg-white bh-h-11 !bh-border-transparent"
            }, [
              createBaseVNode("td", {
                colspan: l.columns.length + 1,
                class: "!bh-p-0 !bh-border-transparent"
              }, Ht, 8, Rt)
            ]))), 128)) : createCommentVNode("", true)
          ]),
          l.cloneHeaderInFooter ? (openBlock(), createElementBlock("tfoot", {
            key: 0,
            class: normalizeClass({ "bh-sticky bh-bottom-0": l.stickyHeader })
          }, [
            createVNode(fe, {
              all: l,
              currentSortColumn: p.value,
              currentSortDirection: N.value,
              isOpenFilter: O.value,
              isFooter: true,
              checkAll: X.value,
              onSelectAll: q,
              onSortChange: se,
              onFilterChange: ie,
              onToggleFilterMenu: oe
            }, null, 8, ["currentSortColumn", "currentSortDirection", "isOpenFilter", "checkAll"])
          ], 2)) : createCommentVNode("", true)
        ], 2),
        F.value && P.value ? (openBlock(), createElementBlock("div", Ot, [
          createVNode(Mt)
        ])) : createCommentVNode("", true)
      ], 6),
      l.pagination && F.value ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["bh-pagination bh-py-5", { "bh-pointer-events-none": P.value }])
      }, [
        createBaseVNode("div", Tt, [
          createBaseVNode("div", Vt, [
            createBaseVNode("span", Ut, toDisplayString(Se(l.paginationInfo, F.value ? unref(le) : 0, unref(ne), F.value)), 1),
            l.showPageSize ? withDirectives((openBlock(), createElementBlock("select", {
              key: 0,
              "onUpdate:modelValue": e[2] || (e[2] = (r) => s.value = r),
              class: "bh-pagesize"
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(l.pageSizeOptions, (r) => (openBlock(), createElementBlock("option", {
                value: r,
                key: r
              }, toDisplayString(r), 9, Et))), 128))
            ], 512)), [
              [vModelSelect, s.value]
            ]) : createCommentVNode("", true)
          ]),
          createBaseVNode("div", It, [
            l.showFirstPage ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              class: normalizeClass(["bh-page-item first-page", { disabled: o.value <= 1 }]),
              onClick: e[3] || (e[3] = (r) => o.value = 1)
            }, [
              l.firstArrow ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: l.firstArrow
              }, null, 8, Gt)) : (openBlock(), createElementBlock("svg", Kt, Wt))
            ], 2)) : createCommentVNode("", true),
            createBaseVNode("button", {
              type: "button",
              class: normalizeClass(["bh-page-item previous-page", { disabled: o.value <= 1 }]),
              onClick: xe
            }, [
              l.previousArrow ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: l.previousArrow
              }, null, 8, Yt)) : (openBlock(), createElementBlock("svg", Qt, Zt))
            ], 2),
            l.showNumbers ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref($e), (r) => (openBlock(), createElementBlock("button", {
              key: r,
              type: "button",
              class: normalizeClass(["bh-page-item", {
                disabled: o.value === r,
                "bh-active": r === o.value
              }]),
              onClick: (f) => Fe(r)
            }, toDisplayString(r), 11, jt))), 128)) : createCommentVNode("", true),
            createBaseVNode("button", {
              type: "button",
              class: normalizeClass(["bh-page-item next-page", { disabled: o.value >= unref(L) }]),
              onClick: Me
            }, [
              l.nextArrow ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: l.nextArrow
              }, null, 8, el)) : (openBlock(), createElementBlock("svg", tl, nl))
            ], 2),
            l.showLastPage ? (openBlock(), createElementBlock("button", {
              key: 2,
              type: "button",
              class: normalizeClass(["bh-page-item last-page", { disabled: o.value >= unref(L) }]),
              onClick: e[4] || (e[4] = (r) => o.value = unref(L))
            }, [
              l.lastArrow ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: l.lastArrow
              }, null, 8, ol)) : (openBlock(), createElementBlock("svg", sl, il))
            ], 2)) : createCommentVNode("", true)
          ])
        ])
      ], 2)) : createCommentVNode("", true)
    ]));
  }
});
export {
  vl as default
};
//# sourceMappingURL=@bhplugin_vue3-datatable.js.map
